	.file	"bootpack.c"
	.data
_font_A.0:
	.byte	0
	.byte	24
	.byte	24
	.byte	24
	.byte	24
	.byte	36
	.byte	36
	.byte	36
	.byte	36
	.byte	126
	.byte	66
	.byte	66
	.byte	66
	.byte	-25
	.byte	0
	.byte	0
	.text
	.balign 2
.globl _HariMain
	.def	_HariMain;	.scl	2;	.type	32;	.endef
_HariMain:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	call	_init_palette
	movl	$4080, -4(%ebp)
	subl	$4, %esp
	movl	-4(%ebp), %eax
	movswl	6(%eax),%eax
	pushl	%eax
	movl	-4(%ebp), %eax
	movswl	4(%eax),%eax
	pushl	%eax
	movl	-4(%ebp), %eax
	pushl	8(%eax)
	call	_init_screen
	addl	$16, %esp
	subl	$8, %esp
	pushl	$_font_A.0
	pushl	$7
	pushl	$10
	pushl	$10
	movl	-4(%ebp), %eax
	movswl	4(%eax),%eax
	pushl	%eax
	movl	-4(%ebp), %eax
	pushl	8(%eax)
	call	_putfont8
	addl	$32, %esp
	call	_io_hlt
	leave
	ret
	.balign 2
.globl _boxfill8
	.def	_boxfill8;	.scl	2;	.type	32;	.endef
_boxfill8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$12, %esp
	movl	16(%ebp), %eax
	movb	%al, -1(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -12(%ebp)
L3:
	movl	-12(%ebp), %eax
	cmpl	32(%ebp), %eax
	jle	L6
	jmp	L2
L6:
	movl	20(%ebp), %eax
	movl	%eax, -8(%ebp)
L7:
	movl	-8(%ebp), %eax
	cmpl	28(%ebp), %eax
	jle	L10
	jmp	L5
L10:
	movl	-12(%ebp), %eax
	imull	12(%ebp), %eax
	addl	-8(%ebp), %eax
	movl	%eax, %edx
	addl	8(%ebp), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L7
L5:
	leal	-12(%ebp), %eax
	incl	(%eax)
	jmp	L3
L2:
	leave
	ret
	.balign 2
.globl _putfont8
	.def	_putfont8;	.scl	2;	.type	32;	.endef
_putfont8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp
	movl	24(%ebp), %eax
	movb	%al, -1(%ebp)
	movl	$0, -8(%ebp)
L12:
	cmpl	$15, -8(%ebp)
	jle	L15
	jmp	L11
L15:
	movl	-8(%ebp), %eax
	addl	20(%ebp), %eax
	imull	12(%ebp), %eax
	addl	8(%ebp), %eax
	addl	16(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-8(%ebp), %eax
	addl	28(%ebp), %eax
	movb	(%eax), %al
	movb	%al, -13(%ebp)
	movb	$-128, %al
	andb	-13(%ebp), %al
	testb	%al, %al
	je	L16
	movl	-12(%ebp), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L16:
	movb	-13(%ebp), %al
	andl	$64, %eax
	testb	%al, %al
	je	L17
	movl	-12(%ebp), %edx
	incl	%edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L17:
	movb	-13(%ebp), %al
	andl	$32, %eax
	testb	%al, %al
	je	L18
	movl	-12(%ebp), %edx
	addl	$2, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L18:
	movb	-13(%ebp), %al
	andl	$16, %eax
	testb	%al, %al
	je	L19
	movl	-12(%ebp), %edx
	addl	$3, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L19:
	movb	-13(%ebp), %al
	andl	$8, %eax
	testb	%al, %al
	je	L20
	movl	-12(%ebp), %edx
	addl	$4, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L20:
	movb	-13(%ebp), %al
	andl	$4, %eax
	testb	%al, %al
	je	L21
	movl	-12(%ebp), %edx
	addl	$5, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L21:
	movb	-13(%ebp), %al
	andl	$2, %eax
	testb	%al, %al
	je	L22
	movl	-12(%ebp), %edx
	addl	$6, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L22:
	movb	-13(%ebp), %al
	andl	$1, %eax
	testb	%al, %al
	je	L14
	movl	-12(%ebp), %edx
	addl	$7, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L14:
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L12
L11:
	leave
	ret
	.data
_table_rgb.1:
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-58
	.byte	-58
	.byte	-58
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	100
	.byte	-124
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.text
	.balign 2
.globl _init_palette
	.def	_init_palette;	.scl	2;	.type	32;	.endef
_init_palette:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	subl	$4, %esp
	pushl	$_table_rgb.1
	pushl	$15
	pushl	$0
	call	_set_palette
	addl	$16, %esp
	leave
	ret
	.balign 2
.globl _set_palette
	.def	_set_palette;	.scl	2;	.type	32;	.endef
_set_palette:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	call	_io_load_eflags
	movl	%eax, -8(%ebp)
	call	_io_cli
	subl	$8, %esp
	pushl	8(%ebp)
	pushl	$968
	call	_io_out8
	addl	$16, %esp
	movl	8(%ebp), %eax
	movl	%eax, -4(%ebp)
L26:
	movl	-4(%ebp), %eax
	cmpl	12(%ebp), %eax
	jle	L29
	jmp	L27
L29:
	subl	$8, %esp
	movl	16(%ebp), %eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	subl	$8, %esp
	movl	16(%ebp), %eax
	incl	%eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	subl	$8, %esp
	movl	16(%ebp), %eax
	addl	$2, %eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	leal	16(%ebp), %eax
	addl	$3, (%eax)
	leal	-4(%ebp), %eax
	incl	(%eax)
	jmp	L26
L27:
	subl	$12, %esp
	pushl	-8(%ebp)
	call	_io_store_eflags
	addl	$16, %esp
	leave
	ret
	.balign 2
.globl _init_screen
	.def	_init_screen;	.scl	2;	.type	32;	.endef
_init_screen:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$29, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	pushl	$0
	pushl	$0
	pushl	$14
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$27, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$27, %eax
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$26, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$3
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	pushl	$2
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$2
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	pushl	$3
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$5, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$23, %eax
	pushl	%eax
	pushl	$59
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$2
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$60
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$60
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$23, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	leave
	ret
	.def	_io_store_eflags;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_io_load_eflags;	.scl	2;	.type	32;	.endef
	.def	_set_palette;	.scl	2;	.type	32;	.endef
	.def	_io_hlt;	.scl	2;	.type	32;	.endef
	.def	_putfont8;	.scl	2;	.type	32;	.endef
	.def	_init_screen;	.scl	2;	.type	32;	.endef
	.def	_init_palette;	.scl	2;	.type	32;	.endef
