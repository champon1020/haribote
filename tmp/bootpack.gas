	.file	"bootpack.c"
	.data
LC0:
	.ascii "(%d, %d)\0"
	.text
	.balign 2
.globl _HariMain
	.def	_HariMain;	.scl	2;	.type	32;	.endef
_HariMain:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$328, %esp
	call	_init_palette
	movl	$4080, -12(%ebp)
	subl	$4, %esp
	movl	-12(%ebp), %eax
	movswl	6(%eax),%eax
	pushl	%eax
	movl	-12(%ebp), %eax
	movswl	4(%eax),%eax
	pushl	%eax
	movl	-12(%ebp), %eax
	pushl	8(%eax)
	call	_init_screen
	addl	$16, %esp
	subl	$8, %esp
	pushl	$14
	leal	-312(%ebp), %eax
	pushl	%eax
	call	_init_mouse_cursor8
	addl	$16, %esp
	movl	-12(%ebp), %eax
	movswl	4(%eax),%eax
	leal	-16(%eax), %edx
	movl	%edx, %eax
	sarl	$31, %eax
	shrl	$31, %eax
	leal	(%eax,%edx), %eax
	sarl	%eax
	movl	%eax, -316(%ebp)
	movl	-12(%ebp), %eax
	movswl	6(%eax),%eax
	leal	-44(%eax), %edx
	movl	%edx, %eax
	sarl	$31, %eax
	shrl	$31, %eax
	leal	(%eax,%edx), %eax
	sarl	%eax
	movl	%eax, -320(%ebp)
	pushl	$16
	leal	-312(%ebp), %eax
	pushl	%eax
	pushl	-320(%ebp)
	pushl	-316(%ebp)
	pushl	$16
	pushl	$16
	movl	-12(%ebp), %eax
	movswl	4(%eax),%eax
	pushl	%eax
	movl	-12(%ebp), %eax
	pushl	8(%eax)
	call	_putblock8_8
	addl	$32, %esp
	pushl	-320(%ebp)
	pushl	-316(%ebp)
	pushl	$LC0
	leal	-56(%ebp), %eax
	pushl	%eax
	call	_sprintf
	addl	$16, %esp
	subl	$8, %esp
	leal	-56(%ebp), %eax
	pushl	%eax
	pushl	$7
	pushl	$0
	pushl	$0
	movl	-12(%ebp), %eax
	movswl	4(%eax),%eax
	pushl	%eax
	movl	-12(%ebp), %eax
	pushl	8(%eax)
	call	_putfonts8_asc
	addl	$32, %esp
	call	_io_hlt
	leave
	ret
	.balign 2
.globl _boxfill8
	.def	_boxfill8;	.scl	2;	.type	32;	.endef
_boxfill8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$12, %esp
	movl	16(%ebp), %eax
	movb	%al, -1(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -12(%ebp)
L3:
	movl	-12(%ebp), %eax
	cmpl	32(%ebp), %eax
	jle	L6
	jmp	L2
L6:
	movl	20(%ebp), %eax
	movl	%eax, -8(%ebp)
L7:
	movl	-8(%ebp), %eax
	cmpl	28(%ebp), %eax
	jle	L10
	jmp	L5
L10:
	movl	-12(%ebp), %eax
	imull	12(%ebp), %eax
	addl	-8(%ebp), %eax
	movl	%eax, %edx
	addl	8(%ebp), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L7
L5:
	leal	-12(%ebp), %eax
	incl	(%eax)
	jmp	L3
L2:
	leave
	ret
	.balign 2
.globl _putfont8
	.def	_putfont8;	.scl	2;	.type	32;	.endef
_putfont8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp
	movl	24(%ebp), %eax
	movb	%al, -1(%ebp)
	movl	$0, -8(%ebp)
L12:
	cmpl	$15, -8(%ebp)
	jle	L15
	jmp	L11
L15:
	movl	-8(%ebp), %eax
	addl	20(%ebp), %eax
	imull	12(%ebp), %eax
	addl	8(%ebp), %eax
	addl	16(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-8(%ebp), %eax
	addl	28(%ebp), %eax
	movb	(%eax), %al
	movb	%al, -13(%ebp)
	movb	$-128, %al
	andb	-13(%ebp), %al
	testb	%al, %al
	je	L16
	movl	-12(%ebp), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L16:
	movb	-13(%ebp), %al
	andl	$64, %eax
	testb	%al, %al
	je	L17
	movl	-12(%ebp), %edx
	incl	%edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L17:
	movb	-13(%ebp), %al
	andl	$32, %eax
	testb	%al, %al
	je	L18
	movl	-12(%ebp), %edx
	addl	$2, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L18:
	movb	-13(%ebp), %al
	andl	$16, %eax
	testb	%al, %al
	je	L19
	movl	-12(%ebp), %edx
	addl	$3, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L19:
	movb	-13(%ebp), %al
	andl	$8, %eax
	testb	%al, %al
	je	L20
	movl	-12(%ebp), %edx
	addl	$4, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L20:
	movb	-13(%ebp), %al
	andl	$4, %eax
	testb	%al, %al
	je	L21
	movl	-12(%ebp), %edx
	addl	$5, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L21:
	movb	-13(%ebp), %al
	andl	$2, %eax
	testb	%al, %al
	je	L22
	movl	-12(%ebp), %edx
	addl	$6, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L22:
	movb	-13(%ebp), %al
	andl	$1, %eax
	testb	%al, %al
	je	L14
	movl	-12(%ebp), %edx
	addl	$7, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L14:
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L12
L11:
	leave
	ret
	.balign 2
.globl _putfonts8_asc
	.def	_putfonts8_asc;	.scl	2;	.type	32;	.endef
_putfonts8_asc:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movl	24(%ebp), %eax
	movb	%al, -1(%ebp)
L25:
	movl	28(%ebp), %eax
	cmpb	$0, (%eax)
	jne	L28
	jmp	L24
L28:
	subl	$8, %esp
	movl	28(%ebp), %eax
	movb	(%eax), %al
	andl	$255, %eax
	sall	$4, %eax
	addl	$_hankaku, %eax
	pushl	%eax
	movsbl	-1(%ebp),%eax
	pushl	%eax
	pushl	20(%ebp)
	pushl	16(%ebp)
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putfont8
	addl	$32, %esp
	leal	16(%ebp), %eax
	addl	$8, (%eax)
	leal	28(%ebp), %eax
	incl	(%eax)
	jmp	L25
L24:
	leave
	ret
	.balign 2
.globl _putblock8_8
	.def	_putblock8_8;	.scl	2;	.type	32;	.endef
_putblock8_8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movl	$0, -8(%ebp)
L30:
	movl	-8(%ebp), %eax
	cmpl	20(%ebp), %eax
	jl	L33
	jmp	L29
L33:
	movl	$0, -4(%ebp)
L34:
	movl	-4(%ebp), %eax
	cmpl	16(%ebp), %eax
	jl	L37
	jmp	L32
L37:
	movl	-8(%ebp), %eax
	addl	28(%ebp), %eax
	imull	12(%ebp), %eax
	addl	24(%ebp), %eax
	addl	-4(%ebp), %eax
	movl	%eax, %edx
	addl	8(%ebp), %edx
	movl	-8(%ebp), %eax
	imull	36(%ebp), %eax
	addl	-4(%ebp), %eax
	addl	32(%ebp), %eax
	movb	(%eax), %al
	movb	%al, (%edx)
	leal	-4(%ebp), %eax
	incl	(%eax)
	jmp	L34
L32:
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L30
L29:
	leave
	ret
	.data
_table_rgb.0:
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-58
	.byte	-58
	.byte	-58
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	100
	.byte	-124
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.text
	.balign 2
.globl _init_palette
	.def	_init_palette;	.scl	2;	.type	32;	.endef
_init_palette:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	subl	$4, %esp
	pushl	$_table_rgb.0
	pushl	$15
	pushl	$0
	call	_set_palette
	addl	$16, %esp
	leave
	ret
	.balign 2
.globl _set_palette
	.def	_set_palette;	.scl	2;	.type	32;	.endef
_set_palette:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	call	_io_load_eflags
	movl	%eax, -8(%ebp)
	call	_io_cli
	subl	$8, %esp
	pushl	8(%ebp)
	pushl	$968
	call	_io_out8
	addl	$16, %esp
	movl	8(%ebp), %eax
	movl	%eax, -4(%ebp)
L40:
	movl	-4(%ebp), %eax
	cmpl	12(%ebp), %eax
	jle	L43
	jmp	L41
L43:
	subl	$8, %esp
	movl	16(%ebp), %eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	subl	$8, %esp
	movl	16(%ebp), %eax
	incl	%eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	subl	$8, %esp
	movl	16(%ebp), %eax
	addl	$2, %eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	leal	16(%ebp), %eax
	addl	$3, (%eax)
	leal	-4(%ebp), %eax
	incl	(%eax)
	jmp	L40
L41:
	subl	$12, %esp
	pushl	-8(%ebp)
	call	_io_store_eflags
	addl	$16, %esp
	leave
	ret
	.balign 2
.globl _init_screen
	.def	_init_screen;	.scl	2;	.type	32;	.endef
_init_screen:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$29, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	pushl	$0
	pushl	$0
	pushl	$14
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$27, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$27, %eax
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$26, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$3
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	pushl	$2
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$2
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	pushl	$3
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$5, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$23, %eax
	pushl	%eax
	pushl	$59
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$2
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$60
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$60
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$23, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	leave
	ret
	.data
_cursor.1:
	.ascii "**************.."
	.ascii "*OOOOOOOOOOO*..."
	.ascii "*OOOOOOOOOO*...."
	.ascii "*OOOOOOOOO*....."
	.ascii "*OOOOOOOO*......"
	.ascii "*OOOOOOO*......."
	.ascii "*OOOOOOO*......."
	.ascii "*OOOOOOOO*......"
	.ascii "*OOOO**OOO*....."
	.ascii "*OOO*..*OOO*...."
	.ascii "*OO*....*OOO*..."
	.ascii "*O*......*OOO*.."
	.ascii "**........*OOO*."
	.ascii "*..........*OOO*"
	.ascii "............*OO*"
	.ascii ".............***"
	.text
	.balign 2
.globl _init_mouse_cursor8
	.def	_init_mouse_cursor8;	.scl	2;	.type	32;	.endef
_init_mouse_cursor8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$12, %esp
	movl	12(%ebp), %eax
	movb	%al, -1(%ebp)
	movl	$0, -12(%ebp)
L46:
	cmpl	$15, -12(%ebp)
	jle	L49
	jmp	L45
L49:
	movl	$0, -8(%ebp)
L50:
	cmpl	$15, -8(%ebp)
	jle	L53
	jmp	L48
L53:
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	addl	$_cursor.1, %eax
	cmpb	$42, (%eax)
	jne	L54
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	addl	8(%ebp), %eax
	movb	$0, (%eax)
L54:
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	addl	$_cursor.1, %eax
	cmpb	$79, (%eax)
	jne	L55
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	addl	8(%ebp), %eax
	movb	$7, (%eax)
L55:
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	addl	$_cursor.1, %eax
	cmpb	$46, (%eax)
	jne	L52
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	movl	%eax, %edx
	addl	8(%ebp), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L52:
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L50
L48:
	leal	-12(%ebp), %eax
	incl	(%eax)
	jmp	L46
L45:
	leave
	ret
	.balign 2
.globl _init_gdtidt
	.def	_init_gdtidt;	.scl	2;	.type	32;	.endef
_init_gdtidt:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	movl	$2555904, -4(%ebp)
	movl	$2553856, -8(%ebp)
	movl	$0, -12(%ebp)
L58:
	cmpl	$8191, -12(%ebp)
	jle	L61
	jmp	L59
L61:
	pushl	$0
	pushl	$0
	pushl	$0
	movl	-12(%ebp), %eax
	sall	$3, %eax
	addl	-4(%ebp), %eax
	pushl	%eax
	call	_set_segmdesc
	addl	$16, %esp
	leal	-12(%ebp), %eax
	incl	(%eax)
	jmp	L58
L59:
	pushl	$16530
	pushl	$0
	pushl	$-1
	movl	-4(%ebp), %eax
	addl	$8, %eax
	pushl	%eax
	call	_set_segmdesc
	addl	$16, %esp
	pushl	$16538
	pushl	$2621440
	pushl	$524287
	movl	-4(%ebp), %eax
	addl	$8, %eax
	pushl	%eax
	call	_set_segmdesc
	addl	$16, %esp
	subl	$8, %esp
	pushl	$2555904
	pushl	$65535
	call	_load_gdtr
	addl	$16, %esp
	movl	$0, -12(%ebp)
L62:
	cmpl	$255, -12(%ebp)
	jle	L65
	jmp	L63
L65:
	pushl	$0
	pushl	$0
	pushl	$0
	movl	-12(%ebp), %eax
	sall	$3, %eax
	addl	-8(%ebp), %eax
	pushl	%eax
	call	_set_gatedesc
	addl	$16, %esp
	leal	-12(%ebp), %eax
	incl	(%eax)
	jmp	L62
L63:
	subl	$8, %esp
	pushl	$2553856
	pushl	$2047
	call	_load_idtr
	addl	$16, %esp
	leave
	ret
	.balign 2
.globl _set_segmdesc
	.def	_set_segmdesc;	.scl	2;	.type	32;	.endef
_set_segmdesc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	cmpl	$1048575, 12(%ebp)
	jbe	L67
	leal	20(%ebp), %eax
	orl	$32768, (%eax)
	movl	12(%ebp), %eax
	shrl	$12, %eax
	movl	%eax, 12(%ebp)
L67:
	movl	8(%ebp), %edx
	movl	12(%ebp), %eax
	movw	%ax, (%edx)
	movl	8(%ebp), %edx
	movl	$-1, %eax
	andl	16(%ebp), %eax
	movw	%ax, 2(%edx)
	movl	8(%ebp), %ecx
	movl	16(%ebp), %eax
	movl	%eax, %edx
	sarl	$16, %edx
	movb	$-1, %al
	andl	%edx, %eax
	movb	%al, 4(%ecx)
	movl	8(%ebp), %ebx
	movl	12(%ebp), %eax
	shrl	$16, %eax
	movb	%al, %cl
	andl	$15, %ecx
	movl	20(%ebp), %eax
	movl	%eax, %edx
	sarl	$8, %edx
	movb	$-16, %al
	andl	%edx, %eax
	orl	%ecx, %eax
	movb	%al, 5(%ebx)
	movl	8(%ebp), %ecx
	movl	16(%ebp), %eax
	movl	%eax, %edx
	sarl	$24, %edx
	movb	$-1, %al
	andl	%edx, %eax
	movb	%al, 7(%ecx)
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _set_gatedesc
	.def	_set_gatedesc;	.scl	2;	.type	32;	.endef
_set_gatedesc:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	movl	$-1, %eax
	andl	12(%ebp), %eax
	movw	%ax, (%edx)
	movl	8(%ebp), %edx
	movl	16(%ebp), %eax
	movw	%ax, 2(%edx)
	movl	8(%ebp), %ecx
	movl	20(%ebp), %eax
	movl	%eax, %edx
	sarl	$8, %edx
	movb	$-1, %al
	andl	%edx, %eax
	movb	%al, 4(%ecx)
	movl	8(%ebp), %edx
	movb	$-1, %al
	andl	20(%ebp), %eax
	movb	%al, 5(%edx)
	movl	8(%ebp), %ecx
	movl	12(%ebp), %eax
	movl	%eax, %edx
	sarl	$16, %edx
	movl	$-1, %eax
	andl	%edx, %eax
	movw	%ax, 6(%ecx)
	popl	%ebp
	ret
	.def	_load_idtr;	.scl	2;	.type	32;	.endef
	.def	_set_gatedesc;	.scl	2;	.type	32;	.endef
	.def	_load_gdtr;	.scl	2;	.type	32;	.endef
	.def	_set_segmdesc;	.scl	2;	.type	32;	.endef
	.def	_io_store_eflags;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_io_load_eflags;	.scl	2;	.type	32;	.endef
	.def	_set_palette;	.scl	2;	.type	32;	.endef
	.def	_io_hlt;	.scl	2;	.type	32;	.endef
	.def	_putfonts8_asc;	.scl	2;	.type	32;	.endef
	.def	_sprintf;	.scl	2;	.type	32;	.endef
	.def	_putblock8_8;	.scl	2;	.type	32;	.endef
	.def	_init_mouse_cursor8;	.scl	2;	.type	32;	.endef
	.def	_init_screen;	.scl	2;	.type	32;	.endef
	.def	_init_palette;	.scl	2;	.type	32;	.endef
