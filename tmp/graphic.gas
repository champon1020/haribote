	.file	"graphic.c"
	.text
	.balign 2
.globl _boxfill8
	.def	_boxfill8;	.scl	2;	.type	32;	.endef
_boxfill8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$12, %esp
	movl	16(%ebp), %eax
	movb	%al, -1(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -12(%ebp)
L2:
	movl	-12(%ebp), %eax
	cmpl	32(%ebp), %eax
	jle	L5
	jmp	L1
L5:
	movl	20(%ebp), %eax
	movl	%eax, -8(%ebp)
L6:
	movl	-8(%ebp), %eax
	cmpl	28(%ebp), %eax
	jle	L9
	jmp	L4
L9:
	movl	-12(%ebp), %eax
	imull	12(%ebp), %eax
	addl	-8(%ebp), %eax
	movl	%eax, %edx
	addl	8(%ebp), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L6
L4:
	leal	-12(%ebp), %eax
	incl	(%eax)
	jmp	L2
L1:
	leave
	ret
	.balign 2
.globl _putfont8
	.def	_putfont8;	.scl	2;	.type	32;	.endef
_putfont8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp
	movl	24(%ebp), %eax
	movb	%al, -1(%ebp)
	movl	$0, -8(%ebp)
L11:
	cmpl	$15, -8(%ebp)
	jle	L14
	jmp	L10
L14:
	movl	-8(%ebp), %eax
	addl	20(%ebp), %eax
	imull	12(%ebp), %eax
	addl	8(%ebp), %eax
	addl	16(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-8(%ebp), %eax
	addl	28(%ebp), %eax
	movb	(%eax), %al
	movb	%al, -13(%ebp)
	movb	$-128, %al
	andb	-13(%ebp), %al
	testb	%al, %al
	je	L15
	movl	-12(%ebp), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L15:
	movb	-13(%ebp), %al
	andl	$64, %eax
	testb	%al, %al
	je	L16
	movl	-12(%ebp), %edx
	incl	%edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L16:
	movb	-13(%ebp), %al
	andl	$32, %eax
	testb	%al, %al
	je	L17
	movl	-12(%ebp), %edx
	addl	$2, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L17:
	movb	-13(%ebp), %al
	andl	$16, %eax
	testb	%al, %al
	je	L18
	movl	-12(%ebp), %edx
	addl	$3, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L18:
	movb	-13(%ebp), %al
	andl	$8, %eax
	testb	%al, %al
	je	L19
	movl	-12(%ebp), %edx
	addl	$4, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L19:
	movb	-13(%ebp), %al
	andl	$4, %eax
	testb	%al, %al
	je	L20
	movl	-12(%ebp), %edx
	addl	$5, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L20:
	movb	-13(%ebp), %al
	andl	$2, %eax
	testb	%al, %al
	je	L21
	movl	-12(%ebp), %edx
	addl	$6, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L21:
	movb	-13(%ebp), %al
	andl	$1, %eax
	testb	%al, %al
	je	L13
	movl	-12(%ebp), %edx
	addl	$7, %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L13:
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L11
L10:
	leave
	ret
	.balign 2
.globl _putfonts8_asc
	.def	_putfonts8_asc;	.scl	2;	.type	32;	.endef
_putfonts8_asc:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movl	24(%ebp), %eax
	movb	%al, -1(%ebp)
L24:
	movl	28(%ebp), %eax
	cmpb	$0, (%eax)
	jne	L27
	jmp	L23
L27:
	subl	$8, %esp
	movl	28(%ebp), %eax
	movb	(%eax), %al
	andl	$255, %eax
	sall	$4, %eax
	addl	$_hankaku, %eax
	pushl	%eax
	movsbl	-1(%ebp),%eax
	pushl	%eax
	pushl	20(%ebp)
	pushl	16(%ebp)
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putfont8
	addl	$32, %esp
	leal	16(%ebp), %eax
	addl	$8, (%eax)
	leal	28(%ebp), %eax
	incl	(%eax)
	jmp	L24
L23:
	leave
	ret
	.balign 2
.globl _putblock8_8
	.def	_putblock8_8;	.scl	2;	.type	32;	.endef
_putblock8_8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movl	$0, -8(%ebp)
L29:
	movl	-8(%ebp), %eax
	cmpl	20(%ebp), %eax
	jl	L32
	jmp	L28
L32:
	movl	$0, -4(%ebp)
L33:
	movl	-4(%ebp), %eax
	cmpl	16(%ebp), %eax
	jl	L36
	jmp	L31
L36:
	movl	-8(%ebp), %eax
	addl	28(%ebp), %eax
	imull	12(%ebp), %eax
	addl	24(%ebp), %eax
	addl	-4(%ebp), %eax
	movl	%eax, %edx
	addl	8(%ebp), %edx
	movl	-8(%ebp), %eax
	imull	36(%ebp), %eax
	addl	-4(%ebp), %eax
	addl	32(%ebp), %eax
	movb	(%eax), %al
	movb	%al, (%edx)
	leal	-4(%ebp), %eax
	incl	(%eax)
	jmp	L33
L31:
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L29
L28:
	leave
	ret
	.data
_table_rgb.0:
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-58
	.byte	-58
	.byte	-58
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	100
	.byte	-124
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.text
	.balign 2
.globl _init_palette
	.def	_init_palette;	.scl	2;	.type	32;	.endef
_init_palette:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	subl	$4, %esp
	pushl	$_table_rgb.0
	pushl	$15
	pushl	$0
	call	_set_palette
	addl	$16, %esp
	leave
	ret
	.balign 2
.globl _set_palette
	.def	_set_palette;	.scl	2;	.type	32;	.endef
_set_palette:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	call	_io_load_eflags
	movl	%eax, -8(%ebp)
	call	_io_cli
	subl	$8, %esp
	pushl	8(%ebp)
	pushl	$968
	call	_io_out8
	addl	$16, %esp
	movl	8(%ebp), %eax
	movl	%eax, -4(%ebp)
L39:
	movl	-4(%ebp), %eax
	cmpl	12(%ebp), %eax
	jle	L42
	jmp	L40
L42:
	subl	$8, %esp
	movl	16(%ebp), %eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	subl	$8, %esp
	movl	16(%ebp), %eax
	incl	%eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	subl	$8, %esp
	movl	16(%ebp), %eax
	addl	$2, %eax
	movb	(%eax), %al
	shrb	$2, %al
	andl	$255, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$16, %esp
	leal	16(%ebp), %eax
	addl	$3, (%eax)
	leal	-4(%ebp), %eax
	incl	(%eax)
	jmp	L39
L40:
	subl	$12, %esp
	pushl	-8(%ebp)
	call	_io_store_eflags
	addl	$16, %esp
	leave
	ret
	.balign 2
.globl _init_screen
	.def	_init_screen;	.scl	2;	.type	32;	.endef
_init_screen:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$29, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	pushl	$0
	pushl	$0
	pushl	$14
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$27, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$27, %eax
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	12(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$26, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$3
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	pushl	$2
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$2
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	pushl	$3
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$5, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$23, %eax
	pushl	%eax
	pushl	$59
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$59
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$2
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$60
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	pushl	$60
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$23, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$47, %eax
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	subl	$4, %esp
	movl	16(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	subl	$24, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$32, %esp
	leave
	ret
	.data
_cursor.1:
	.ascii "**************.."
	.ascii "*OOOOOOOOOOO*..."
	.ascii "*OOOOOOOOOO*...."
	.ascii "*OOOOOOOOO*....."
	.ascii "*OOOOOOOO*......"
	.ascii "*OOOOOOO*......."
	.ascii "*OOOOOOO*......."
	.ascii "*OOOOOOOO*......"
	.ascii "*OOOO**OOO*....."
	.ascii "*OOO*..*OOO*...."
	.ascii "*OO*....*OOO*..."
	.ascii "*O*......*OOO*.."
	.ascii "**........*OOO*."
	.ascii "*..........*OOO*"
	.ascii "............*OO*"
	.ascii ".............***"
	.text
	.balign 2
.globl _init_mouse_cursor8
	.def	_init_mouse_cursor8;	.scl	2;	.type	32;	.endef
_init_mouse_cursor8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$12, %esp
	movl	12(%ebp), %eax
	movb	%al, -1(%ebp)
	movl	$0, -12(%ebp)
L45:
	cmpl	$15, -12(%ebp)
	jle	L48
	jmp	L44
L48:
	movl	$0, -8(%ebp)
L49:
	cmpl	$15, -8(%ebp)
	jle	L52
	jmp	L47
L52:
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	addl	$_cursor.1, %eax
	cmpb	$42, (%eax)
	jne	L53
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	addl	8(%ebp), %eax
	movb	$0, (%eax)
L53:
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	addl	$_cursor.1, %eax
	cmpb	$79, (%eax)
	jne	L54
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	addl	8(%ebp), %eax
	movb	$7, (%eax)
L54:
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	addl	$_cursor.1, %eax
	cmpb	$46, (%eax)
	jne	L51
	movl	-12(%ebp), %eax
	sall	$4, %eax
	addl	-8(%ebp), %eax
	movl	%eax, %edx
	addl	8(%ebp), %edx
	movb	-1(%ebp), %al
	movb	%al, (%edx)
L51:
	leal	-8(%ebp), %eax
	incl	(%eax)
	jmp	L49
L47:
	leal	-12(%ebp), %eax
	incl	(%eax)
	jmp	L45
L44:
	leave
	ret
	.def	_io_store_eflags;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_io_load_eflags;	.scl	2;	.type	32;	.endef
	.def	_set_palette;	.scl	2;	.type	32;	.endef
